# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(MajorVersion).$(MinorVersion)

trigger:
  branches:
    include:
    - main
  paths:
    include:
      - api/*
    exclude:
      - api/deployment/azure-pipelines.yml

pr:      
  branches:
    include:
    - main
  paths:
    include:
      - api/*
    exclude:
      - api/deployment/azure-pipelines.yml

variables:
- name: MajorVersion
  value: 0.0
- name: MinorVersion
  value: $[counter(format('{0}-{1}', variables['Build.SourceBranch'], variables['MajorVersion']), 0)]
- name: IsMain
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
- name: IsPr
  value: $[contains(variables['Build.SourceBranch'], 'refs/pull/')]
- name: IsBranch
  value: $[and(eq(variables['IsPr'], 'False'), eq(variables['IsMain'], 'False'))]

jobs:
- job: 'Job'
  displayName: 'Build, Test, & Publish'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - task: CopyFiles@2
    displayName: 'Copy API Source Files'
    inputs:
      SourceFolder: 'api/src'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: 'Copy API Deployment Scripts'
    inputs:
      SourceFolder: 'api/deployment/scripts'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/scripts'

  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: '3.7'

  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install Tools'

  - script: pip install -r api/src/requirements.txt
    displayName: 'Install Requirements'

  - script: |
      cd api/src
      black --check --exclude env ../src
    displayName: 'Check Formatting'

  - task: DockerInstaller@0
    inputs:
      dockerVersion: '17.09.0-ce'

  - script: |
      docker pull postgres
      docker pull redis
      docker run -d --name postgres-docker -p 5432:5432 -e POSTGRES_PASSWORD=postgres postgres
      docker run -d --name redis-docker -p 6379:6379 redis

  - script: |
      cd api/src
      pytest --junitxml=../../test-results.xml
    displayName: 'Run Tests'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test-results.xml'
      failTaskOnFailedTests: true
      testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
